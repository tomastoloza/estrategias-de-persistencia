CREATE DATABASE CLASE2_5;

USE CLASE2_7;

CREATE TABLE FABRICANTES
(
    CODIGO INT         NOT NULL,
    NOMBRE VARCHAR(50) NOT NULL,
    PRIMARY KEY (CODIGO)
);

CREATE TABLE ARTICULOS
(
    CODIGO     INT         NOT NULL,
    NOMBRE     VARCHAR(50) NOT NULL,
    PRECIO     INT         NOT NULL,
    FABRICANTE INT         NOT NULL,
    CONSTRAINT FK_FABRICANTE FOREIGN KEY (FABRICANTE) REFERENCES FABRICANTES (CODIGO)
);

# 1. Obtener los nombres de los productos de la tienda.
SELECT NOMBRE FROM ARTICULOS;
# 2. Obtener los nombres y los precios de los productos de la tienda.
SELECT NOMBRE, PRECIO FROM ARTICULOS;
# 3. Obtener el nombre de los productos cuyo precio sea menor o igual a 200
SELECT NOMBRE, PRECIO FROM ARTICULOS WHERE PRECIO <= 200;
# 4. Obtener todos los datos de los artículos cuyo precio esté entre los 60 $ y los 120 $ # (ambas cantidades incluidas).
SELECT * FROM ARTICULOS WHERE PRECIO BETWEEN 60 AND 120;
# 5. Obtener el nombre y el precio en dolares (es decir, el precio multiplicado por 85)
SELECT NOMBRE, PRECIO*85 FROM ARTICULOS;
# 6. Seleccionar el precio medio de todos los productos.
SELECT AVG(PRECIO) FROM ARTICULOS;
# 7. Obtener un listado de artículos, incluyendo el nombre del artículo, su precio, y el nombre de su fabricante.
SELECT ARTICULOS.NOMBRE, PRECIO, ARTICULOS.NOMBRE FROM ARTICULOS, FABRICANTES WHERE ARTICULOS.FABRICANTE = FABRICANTES.CODIGO;
--

CREATE TABLE DEPARTAMENTOS(
  CODIGO INT NOT NULL,
  NOMBRE VARCHAR(100),
  PRESUPUESTO INT,
  PRIMARY KEY (CODIGO)
);

CREATE TABLE EMPLEADOS(
    DNI VARCHAR(8),
    NOMBRE VARCHAR(100),
    APELLIDOS VARCHAR(255),
    DEPARTAMENTO INT NOT NULL,
    PRIMARY KEY (DNI),
    CONSTRAINT FOREIGN KEY (DEPARTAMENTO) REFERENCES DEPARTAMENTOS (CODIGO)
);

# 8. Obtener todos los datos de los empleados que se apellidan Lopez y los que se # apellidan Perez.
SELECT * FROM EMPLEADOS WHERE APELLIDOS LIKE '%LOPEZ%' OR '%PEREZ%';
# 9. Obtener todos los datos de los empleados que trabajan para el departamento 37 y para el departamento 77.
SELECT * FROM EMPLEADOS WHERE DEPARTAMENTO = 37 OR DEPARTAMENTO = 77;
# 10. Obtener un listado completo de empleados, incluyendo el nombre y apellidos del empleado junto al nombre y presupuesto de su departamento.
SELECT EMPLEADOS.NOMBRE, APELLIDOS, DEPARTAMENTOS.NOMBRE, PRESUPUESTO FROM EMPLEADOS, DEPARTAMENTOS WHERE EMPLEADOS.DEPARTAMENTO = DEPARTAMENTOS.CODIGO;
# 11. Obtener los nombres (unicamente los nombres) de los departamentos que tienen mas de dos empleados.
SELECT DEPARTAMENTOS.NOMBRE FROM DEPARTAMENTOS, EMPLEADOS GROUP BY DEPARTAMENTOS.CODIGO = EMPLEADOS.DEPARTAMENTO, DEPARTAMENTOS.NOMBRE HAVING COUNT(*)>2;
# 12. Añadir un nuevo departamento: ‘Calidad’, con presupuesto de 40.000 $ y código

# Añadir un empleado vinculado al departamento reci ́en creado: Esther Vazquez, DNI: 89267109
INSERT INTO DEPARTAMENTOS(CODIGO, NOMBRE, PRESUPUESTO) VALUES (123, 'CALIDAD', 40000);
INSERT INTO EMPLEADOS(DNI, NOMBRE, APELLIDOS, DEPARTAMENTO) VALUES (89267109, 'ESTHER','VAZQUEZ', 123);

# 13. Aplicar un recorte presupuestario del 10 % a todos los departamentos.
UPDATE DEPARTAMENTOS SET PRESUPUESTO = PRESUPUESTO - (PRESUPUESTO * 0.10);


CREATE TABLE ALMACENES(
    CODIGO INT NOT NULL,
    LUGAR VARCHAR(50),
    CAPACIDAD INT NOT NULL,
    PRIMARY KEY (CODIGO)
                      );


CREATE TABLE CAJAS(
  NUM_REFERENCIA INT NOT NULL,
  CONTENIDO VARCHAR(100) NOT NULL,
  VALOR INT NOT NULL,
  ALMACEN INT NOT NULL,
  PRIMARY KEY (NUM_REFERENCIA),
  CONSTRAINT FK_ALMACEN FOREIGN KEY (ALMACEN) REFERENCES ALMACENES (CODIGO)
);

# 14. Obtener el numero de cajas que hay en cada almac ́en.

SELECT COUNT(*) FROM CAJAS, ALMACENES WHERE CAJAS.ALMACEN = ALMACENES.CODIGO;


INSERT INTO ALMACENES(CODIGO, LUGAR, CAPACIDAD) VALUES (1, 'Costa Salguero', 2);
INSERT INTO ALMACENES(CODIGO, LUGAR, CAPACIDAD) VALUES (2, 'Avellaneda', 2);
INSERT INTO CAJAS(NUM_REFERENCIA, CONTENIDO, VALOR, ALMACEN) VALUES (1, 'Algo', 3000, 1);
INSERT INTO CAJAS(NUM_REFERENCIA, CONTENIDO, VALOR, ALMACEN) VALUES (2, 'Algo', 3000, 1);
INSERT INTO CAJAS(NUM_REFERENCIA, CONTENIDO, VALOR, ALMACEN) VALUES (3, 'Algo', 3000, 1);
INSERT INTO CAJAS(NUM_REFERENCIA, CONTENIDO, VALOR, ALMACEN) VALUES (4, 'Algo 2', 3000, 2);

# 15. Vaciar el contenido de los almacenes que esta ́n saturados.
SELECT ALMACEN, CAJAS.NUM_REFERENCIA FROM ALMACENES, CAJAS WHERE ALMACEN = CODIGO;

UPDATE (SELECT ALMACEN, CODIGO FROM ALMACENES, CAJAS WHERE ALMACEN = CODIGO GROUP BY ALMACEN, CAPACIDAD HAVING COUNT(NUM_REFERENCIA) > CAPACIDAD) SET ALMACEN = NULL WHERE ALMACEN = CODIGO;

